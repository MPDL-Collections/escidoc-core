<?xml version="1.0" encoding="utf-8"?>

<!--
	This build file was generated by MiddlegenIDE.
	Changed by TTE
	
	MiddlegenIDE: http://ultimania.org/middlegenide/
-->

<project name="Middlegen Hibernate" default="generate-all"
	basedir="..">
	
	<property file="build/escidoc-build.properties" />
	<property file="build/escidoc-build.default.properties" />
	
	<property name="hibernate.cascade" value="all" />
	<property name="gen.xdoclet-tag" value="true" />
	<property name="gui" value="false" />
	<property name="jdbc.jar"
		value="${jdbc.driver.jar}" />
	<property name="middlegen.lib.dir"
		value="build/lib/middlegen-2.1.91/lib" />
	<property name="database.driver" value="${jdbc.driver.class}" />
	<property name="database.catalog" value="" />

	<target name="init"
		depends="prepare,fail-if-no-middlegen">

		<!-- FIXME: remove hibernate stuff -->
		<taskdef name="middlegen" classname="middlegen.MiddlegenTask"
			classpathref="middlegen.classpath" />
	</target>


	<!-- prepare generation from database schema. Builds the database(s). -->
	<target name="prepare">
		<path id="middlegen.classpath">
			<pathelement path="${jdbc.jar}" />
			<fileset dir="${middlegen.lib.dir}" includes="*.jar" />
		</path>

		<available property="middlegen"
			classname="middlegen.MiddlegenTask"
			classpathref="middlegen.classpath" />
		
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="build/lib/ant-contrib-1.0b1.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="prepare-db">
		<echo level="info" message="RUN: build Database" />
		<echo level="info" message="RUN: Used jdbc.jar: ${jdbc.jar}" />
		<ant antfile="build/database-build.xml" dir="" target="init_UnitTests" />
		<echo level="info" message="DONE: build Database" />
	</target>

	<target name="fail-if-no-middlegen" unless="middlegen">
		<fail>Middlegen is not found. Please install Middlegen.</fail>
	</target>

	<!-- generate java classes and hibernate mappings from database schemas for
		all components -->
	<target name="generate-all" depends="gen-hbm-all">
		<ant antfile="build/hibernate-tools-build.xml" target="gen-java-all" />
	</target>


	<!-- prepare generating persistent base class to be extended by domain class -->
	<target name="prepare-base-class">
		<replace dir="${destination}">
			<include name="${hbmsource}" />
			<replacetoken>&lt;meta attribute</replacetoken>
			<replacevalue>&lt;meta attribute="generated-class"&gt;
				@generated-class &lt;/meta&gt;
				&lt;meta attribute
			</replacevalue>
		</replace>
		<replace dir="${destination}" token="@generated-class"
			value="${generatedclass}">
			<include name="${hbmsource}" />
		</replace>
	</target>

	<!-- generic target to generate hibernate mapping from a single table of a database schema for a 
		component. -->
	<target name="gen-hbm-single-table" depends="init, prepare"
		if="database.table"
		description="generate hibernate mapping from a single table of a database schema for a component">
		<condition property="prefsdir" value="${destination}">
			<not>
				<isset property="prefsdir" />
			</not>
		</condition>
		<middlegen appname="${package}" prefsdir="${prefsdir}"
			gui="${gui}" databaseurl="${database.url}"
			driver="${database.driver}" username="${escidoc.database.userid}"
			password="${escidoc.database.password}" schema="${database.schema}"
			catalog="${database.catalog}">
			<hibernate version="3.0" destination="${destination}"
				package="${package}" genXDocletTags="${gen.xdoclet-tag}"
				standardCascade="${hibernate.cascade}"
				standardGeneratorScheme="${idgenerator}"
				databaseSchema="${database.schema}"
				javaTypeMapper="middlegen.plugins.hibernate.HibernateJavaTypeMapper" />
			<table name="${database.table}" />
		</middlegen>
	</target>

	<!-- generic target to generate hibernate mappings from all tables of a database schema for a 
		component -->
	<target name="gen-hbm-all-tables" depends="init, prepare"
		unless="database.table"
		description="generate hibernate mappings from all tables of a database schema for a component">
		<condition property="prefsdir" value="${destination}">
			<not>
				<isset property="prefsdir" />
			</not>
		</condition>
		<middlegen appname="${package}" prefsdir="${prefsdir}"
			gui="${gui}" databaseurl="${database.url}"
			driver="${database.driver}" username="${escidoc.database.userid}"
			password="${escidoc.database.password}" schema="${database.schema}"
			catalog="${database.catalog}">
			<hibernate version="3.0" destination="${destination}"
				package="${package}" genXDocletTags="${gen.xdoclet-tag}"
				standardCascade="${hibernate.cascade}"
				standardGeneratorScheme="${idgenerator}"
				databaseSchema="${database.schema}"
				javaTypeMapper="middlegen.plugins.hibernate.HibernateJavaTypeMapper" />
		</middlegen>
	</target>

	<!-- generic target to generate hibernate mappings from a database schema for a 
		component -->
	<target name="gen-hbm"
		depends="gen-hbm-single-table, gen-hbm-all-tables"
		description="generate hibernate mappings from a database schema for a component">

	</target>

	<!-- generate hibernate mappigs from database schemas for aa, common, st, and sm -->
	<target name="gen-hbm-all" depends="init, prepare, prepare-db" description="generate hibernate mappigs from database schemas for aa, om, common, st, and sm">
		<for list="${middlegen-components}" param="component">
			<sequential>
				<ant antfile="build/@{component}-build.xml" target="gen-hbm" />
			</sequential>
		</for>
	</target>
	
</project>