<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ CDDL HEADER START
  ~
  ~ The contents of this file are subject to the terms of the Common Development and Distribution License, Version 1.0
  ~ only (the "License"). You may not use this file except in compliance with the License.
  ~
  ~ You can obtain a copy of the license at license/ESCIDOC.LICENSE or http://www.escidoc.de/license. See the License
  ~ for the specific language governing permissions and limitations under the License.
  ~
  ~ When distributing Covered Code, include this CDDL HEADER in each file and include the License file at
  ~ license/ESCIDOC.LICENSE. If applicable, add the following below this CDDL HEADER, with the fields enclosed by
  ~ brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
  ~
  ~ CDDL HEADER END
  ~
  ~ Copyright 2006-2011 Fachinformationszentrum Karlsruhe Gesellschaft fuer wissenschaftlich-technische Information mbH
  ~ and Max-Planck-Gesellschaft zur Foerderung der Wissenschaft e.V. All rights reserved. Use is subject to license
  ~ terms.
  -->

<project name="XDoclet Generator" basedir=".." default="xdoclet_generation_all">

	<property file="build/escidoc-build.properties" />
		<property file="build/escidoc-build.default.properties" />

	<path id="xdoclet.classpath">
		<fileset dir="build/lib/xdoclet" includes="**/*.jar" />
		<fileset dir="build/lib/j2ee" includes="**/*.jar" />
	</path>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="build/lib/ant-contrib-1.0b1.jar" />
		</classpath>
	</taskdef>

	<!-- Executes all targets for XDoclet code generation -->
	<target name="xdoclet_generation_all" description="Generates all files from XDoclet tags. Generates jmx stuff">
		<for list="${components}" param="component">
			<sequential>
				<antcall target="xdoclet_generation">
					<param name="source" value="@{component}" />
				</antcall>
			</sequential>
		</for>
		<antcall target="springSet-remote">
		</antcall>
	</target>
	
	<!-- Generate all mbeans -->
	<target name="jmx_generation_all" description="Generates all jmx stuff.">
		<for list="${jmx-components}" param="jmx-component">
			<sequential>
				<antcall target="jmxSet">
					<param name="component" value="@{jmx-component}" />
				</antcall>
			</sequential>
		</for>
	</target>

	<!-- Executes generic targets for XDoclet code generation - per component -->
	<target name="xdoclet_generation" description="Executes generic targets for XDoclet code generation - per component">
		<antcall target="ejbSet">
			<param name="source" value="${source}" />
		</antcall>
		<antcall target="hibernateSet">
			<param name="source" value="${source}" />
		</antcall>
		<antcall target="springSet">
			<param name="source" value="${source}" />
		</antcall>
	</target>

	<!-- Generate bean, interfaces and deployment descriptors for Enterprise Java Beans per component -->
	<target name="ejbSet" description="ejbSGenerate bean, interfaces and deployment descriptors for Enterprise Java Beans per componentet">
		<taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask" classpathref="xdoclet.classpath" />
		<ejbdoclet ejbSpec="2.1" excludedTags="@version,@author,@todo" destDir="${source}/gen" verbose="true" addedTags="">
			<fileset dir="${source}/src" includes="**/*.java">
			</fileset>
			<template templatefile="build/xdoclet/bean.xdt" destinationFile="{0}Bean.java" destdir="${source}/gen" havingclasstag="service">
				<packageSubstitution packages="service" substituteWith="ejb" />
			</template>
		</ejbdoclet>
		<ejbdoclet ejbSpec="2.1" excludedTags="@version,@author,@todo" destDir="${source}/gen" verbose="true" addedTags="">
			<fileset dir="${source}/gen">
				<include name="**/*Bean.java" />
			</fileset>
			<fileset dir="${source}/src" includes="**/*Bean.java">
			</fileset>
			<packageSubstitution packages="ejb" substituteWith="ejb.interfaces" />
			<remoteinterface destDir="common/gen">
			</remoteinterface>
			<localinterface destDir="common/gen">
			</localinterface>
			<homeinterface destDir="common/gen">
			</homeinterface>
			<localhomeinterface destDir="common/gen">
			</localhomeinterface>
			<session destDir="${source}/gen">
			</session>
			<deploymentdescriptor validateXML="false" destinationFile="ejb-jar.xml" destDir="${source}/gen/META-INF" mergeDir="${source}/src/META-INF/merge">
			</deploymentdescriptor>
			<jboss Version="4.0" destDir="${source}/gen/META-INF" mergeDir="${source}/src/META-INF/merge">
			</jboss>
			<service-endpoint templateFile="build/xdoclet/service-endpoint.xdt" destDir="${source}/gen" />
			<axisdeploy templateFile="build/xdoclet/axis-deploy_wsdd.xdt" contextProviderUrl="de.escidoc.core.${source}" prefixWithPackageStructure="false" destDir="${source}/gen/META-INF" mergeDir="${source}/src/META-INF/merge">
			</axisdeploy>
			<axisundeploy prefixWithPackageStructure="false" destDir="${source}/gen/META-INF" mergeDir="${source}/src/META-INF/merge">
			</axisundeploy>
		</ejbdoclet>
		<mkdir dir="${source}/gen/de/escidoc/core/${source}/ejb/interfaces" />
	</target>

	<!-- Generate the Hibernate configuration files per component -->
	<target name="hibernateSet" description="Generate the Hibernate configuration files per component">
		<taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask" classpathref="xdoclet.classpath" />
		<hibernatedoclet excludedTags="@version,@author,@todo" destDir="${source}/gen" force="true" verbose="true">
			<fileset dir="${source}/src" includes="**/persistence/hibernate/*.java" excludes="">
			</fileset>
			<hibernate Version="3.0">
			</hibernate>
		</hibernatedoclet>
	</target>

	<!-- Generate the Spring applicationContext.xml file per component for all Spring Beans -->
	<target name="springSet" description="Generate the Spring applicationContext.xml file per component for all Spring Beans">
		<taskdef name="springdoclet" classname="xdoclet.modules.spring.SpringDocletTask" classpathref="xdoclet.classpath" />
		<springdoclet destDir="${source}/gen" mergeDir="${source}/src/META-INF/merge">
			<fileset dir="${source}/src" includes="" excludes="">
			</fileset>
			<springxml destinationFile="applicationContext-${source}.xml" destDir="${source}/gen/META-INF" templateFile="build/xdoclet/spring_xml.xdt" defaultLazyInit="true" >
			</springxml>
		</springdoclet>
	</target>

	<!-- Generate MBeans per component -->
	<target name="jmxSet" description="Generate MBeans per component">
		<taskdef name="jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask" classpathref="xdoclet.classpath" />
		<jmxdoclet destDir="${component}/gen" verbose="true" mergeDir="${component}/src/META-INF/merge"
			excludedtags="@author,@version">
			<fileset dir="${component}/src">
				<include name="**/mbean/**/*.java"/>
			</fileset>
			<mbeaninterface destdir="${component}/gen"/>
			<jbossxmbean validateXML="false"/>
			<jbossxmlservicetemplate validateXML="false" destinationFile="{0}-service.xml" servicefile="jboss"/>
		</jmxdoclet>

		<!-- Absolute URI der DTD durch relative URI ersetzen -->
		<replace dir="${component}/gen" 
			token="http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd"
			value="jboss_xmbean_1_0.dtd"
			includes="**/*.xml" />

	</target>

	<!-- Generate the Spring applicationContext.xml file for remote wiring -->
	<target name="springSet-remote"
		description="Generate the Spring applicationContext.xml file for remote wiring. Generates from all java files in any folder that matches */src/ except the common folder.">
		<taskdef name="springdoclet" classname="xdoclet.modules.spring.SpringDocletTask" classpathref="xdoclet.classpath" />
		<springdoclet destDir="common">
			<fileset dir="aa/src" includes="**/*.java" excludes="" />
                        <fileset dir="adm/src" includes="**/*.java" excludes="" />
            <fileset dir="cmm/src" includes="**/*.java" excludes="" />
            <fileset dir="common/src" includes="**/*.java" excludes="" />
			<fileset dir="om/src" includes="**/*.java" excludes="" />
			<fileset dir="oai/src" includes="**/*.java" excludes="" />
			<fileset dir="oum/src" includes="**/*.java" excludes="" />
			<fileset dir="sb/src" includes="**/*.java" excludes="" />
			<fileset dir="sm/src" includes="**/*.java" excludes="" />
			<fileset dir="st/src" includes="**/*.java" excludes="" />
			<fileset dir="tme/src" includes="**/*.java" excludes="" />
			<fileset dir="wm/src" includes="**/*.java" excludes="" />
			<springxml destDir="common/gen/META-INF" destinationFile="applicationContext-remote.xml" mergeDir="common/src/META-INF/merge" templateFile="build/xdoclet/spring_xml_remote.xdt" havingclasstag="service" defaultLazyInit="true">
			</springxml>
		</springdoclet>

	</target>

</project>
