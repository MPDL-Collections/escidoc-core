<?xml version="1.0" encoding="UTF-8"?>
<project name="eSciDoc infrastructure - api documentation build file" default="build-all-filtered" basedir="..">


	<!-- start of common properties section -->
	<property file="build/escidoc-build.properties" />
	<property file="build/escidoc-build.default.properties" />
	<property name="edition" value="filtered" description="Possible values are full and filtered. If set to filtered only the methods marked as visible are included in REST/SOAP specific chapter." />

	<tstamp>
		<format property="build.date" pattern="dd.MM.yyyy" />
	</tstamp>

	<!-- Db Doclet configuration -->
	<property name="dbdoclet.exception.packages" value="de.escidoc.core.common.exceptions.application.invalid,de.escidoc.core.common.exceptions.application.missing,de.escidoc.core.common.exceptions.application.notfound,de.escidoc.core.common.exceptions.application.security,de.escidoc.core.common.exceptions.application.violated,de.escidoc.core.common.exceptions.system" />
	<property name="dbdoclet.component.packages" value="de.escidoc.core.aa.service.interfaces,de.escidoc.core.cmm.service.interfaces,de.escidoc.core.om.service.interfaces,de.escidoc.core.oum.service.interfaces,de.escidoc.core.sm.service.interfaces,de.escidoc.core.tme.service.interfaces,de.escidoc.core.adm.service.interfaces,de.escidoc.core.oai.service.interfaces" />
	<property name="dbdoclet.document" value="escidoc-reference.xml" />

	<!-- xslt configuration -->
	<property name="xsl.dbdoclet.master.document" value="XslApiDocMaster.xml" />
	<property name="xsl.dbdoclet.stylesheet" value="Api.xsl" />
	<property name="xslt.src.dir" value="escidoc-core.ear/escidoc-core.war/xsl" />

	<property name="documentation.basedir" value="gen/documentation" />
	<property name="documentation.common.dir" value="${basedir}/common/gen/documentation" />
	<property name="pdf.dir" value="pdf" />
	<property name="docbook.dir" value="docbook" />
	<property name="src.docbook.basedir" value="src/${docbook.dir}" />

	<property name="gen.docbook.dir" value="${documentation.common.dir}/docbook" />
	<property name="gen.pdf.dir" value="${documentation.common.dir}/fo" />
	<property name="result.dir" value="${documentation.common.dir}/pdf" />

	<property name="schemas.src.dir" value="escidoc-core.ear/escidoc-core.war/xsd" />
	<property name="schemas.rest.src.dir" value="${schemas.src.dir}/rest" />
	<property name="schemas.soap.src.dir" value="${schemas.src.dir}/soap" />
	<!--<property name="schema.version" value="0.4" />-->
	<property name="schemas.build.dir" value="${gen.docbook.dir}" />

	<property name="prefix.full" value="full-" />
	<property name="prefix.filtered" value="" />
	<property name="interface.rest" value="Rest" />
	<property name="interface.soap" value="Soap" />
	<property name="escidoc.logo" value="escidoc-logo.jpg" />
	<!-- end of common properties section -->

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="build/lib/ant-contrib-1.0b1.jar" />
		</classpath>
	</taskdef>

	<target name="define-label">
		<if>
			<not>
				<isset property="build.version" />
			</not>
			<then>
				<if>
					<isset property="RELEASE_LABEL" />
					<then>
						<echo>Using ${RELEASE_LABEL} as label</echo>
						<property name="build.version" value="${RELEASE_LABEL}" />
					</then>
					<else>
						<if>
							<isset property="env.BUILD_NUMBER" />
							<then>
								<echo>Using ${env.BUILD_NUMBER} as build number</echo>
								<property name="label-suffix" value="-build${env.BUILD_NUMBER}" />
							</then>
							<else>
								<echo>Using HEAD as build number</echo>
								<property name="label-suffix" value="-buildHEAD" />
							</else>
						</if>
						<property name="build.version" value="${version}${label-suffix}" />
					</else>
				</if>
			</then>
		</if>
	</target>


	<target name="build-all" depends="define-label, clean-all">
		<antcall target="build-content-model" />
		<antcall target="build-admin" />
		<antcall target="build-context" />
		<antcall target="build-set-definition" />
		<antcall target="build-container" />
		<antcall target="build-item" />
		<antcall target="build-ingest" />
		<antcall target="build-jhove" />
		<antcall target="build-semanticstore" />
		<antcall target="build-organizational-unit" />
		<antcall target="build-policy-decision-point" />
		<antcall target="build-role" />
		<antcall target="build-user-account" />
		<antcall target="build-user-group" />
		<antcall target="build-search" />
		<antcall target="build-aggregation-definition" />
		<antcall target="build-report" />
		<antcall target="build-report-definition" />
		<antcall target="build-scope" />
		<antcall target="build-statistic-data" />
		<antcall target="build-preprocessing" />
		<antcall target="collect-results" />
	</target>

	<target name="build-all-full">
		<antcall target="build-all">
			<param name="edition" value="full" />
		</antcall>
	</target>

	<target name="build-all-filtered">
		<antcall target="build-all">
			<param name="edition" value="filtered" />
		</antcall>
	</target>

	<target name="collect-results">
		<antcall target="clean-component">
			<param name="component" value="common" />
		</antcall>
		<mkdir dir="${basedir}/common/${documentation.basedir}/${pdf.dir}" />
		<copy todir="${basedir}/common/${documentation.basedir}/${pdf.dir}" flatten="true" failonerror="false">
			<fileset dir="${basedir}/aa/${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
			<fileset dir="${basedir}/adm/${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
			<fileset dir="${basedir}/cmm/${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
			<fileset dir="${basedir}/om//${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
			<fileset dir="${basedir}/oum/${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
			<fileset dir="${basedir}/sb/${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
			<fileset dir="${basedir}/sm/${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
			<fileset dir="${basedir}/tme/${documentation.basedir}/${pdf.dir}" includes="**/*.pdf" />
		</copy>
	</target>

	<!-- start: build of context documentation -->
	<target name="build-context">
		<antcall target="build-handler-documentation">
			<param name="component" value="om" />
			<param name="resource" value="context" />
			<param name="document" value="_api_doc_OM_Context" />
			<param name="descriptor" value="/de/escidoc/core/om/servlet/context.xml" />
			<param name="schema.name" value="context.xsd" />
			<param name="schema.version" value="0.7" />
			<param name="docbook.name" value="ContextXsd.xml" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of context documentation -->

	<!-- start: build of contentmodel documentation -->
	<target name="build-content-model">
		<antcall target="build-handler-documentation">
			<param name="component" value="cmm" />
			<param name="resource" value="content-model" />
			<param name="document" value="_api_doc_OM_ContentModel" />
			<param name="docbook.name" value="ContentModelXsd.xml" />
			<param name="descriptor" value="/de/escidoc/core/cmm/servlet/content-model.xml" />
			<param name="schema.name" value="content-model.xsd" />
			<param name="schema.version" value="0.1" />
			<param name="draft.mode" value="yes"/>
		</antcall>
	</target>
	<!-- end: build of contentmodel documentation -->

	<!-- start: build of Content Relation documentation -->
	<target name="build-content-relation">
		<antcall target="build-handler-documentation">
			<param name="resource" value="contentRelation" />
			<param name="component" value="om" />
			<param name="document" value="_api_doc_OM_Content_Relation" />
			<param name="descriptor" value="/de/escidoc/core/om/servlet/content-relation.xml" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of Content Relation documentation -->

	<!-- start: build of admin documentation -->
	<target name="build-admin">
		<antcall target="build-handler-documentation">
			<param name="component" value="adm" />
			<param name="resource" value="admin" />
			<param name="document" value="_api_doc_ADM_Admin" />
			<param name="descriptor" value="/de/escidoc/core/adm/servlet/admin.xml" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of admin documentation -->

	<!-- start: build of organizational-unit documentation -->
	<target name="build-organizational-unit">
		<antcall target="build-handler-documentation">
			<param name="component" value="oum" />
			<param name="resource" value="organizational-unit" />
			<param name="document" value="_api_doc_OM_OrganizationalUnit" />
			<param name="descriptor" value="/de/escidoc/core/oum/servlet/organizational-unit.xml" />
			<param name="schema.name" value="organizational-unit.xsd" />
			<param name="schema.version" value="0.8" />
			<param name="docbook.name" value="OrganizationalUnitXsd.xml" />
			<param name="stylesheet.name" value="CreateXsdDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>

	</target>
	<!-- end: build of set-definition documentation -->

	<!-- start: build of set-definition documentation -->
	<target name="build-set-definition">
		<antcall target="build-handler-documentation">
			<param name="component" value="oai" />
			<param name="resource" value="set-definition" />
			<param name="document" value="_api_doc_OAI_SetDefinition" />
			<param name="descriptor" value="/de/escidoc/core/oai/servlet/set-definition.xml" />
			<param name="schema.name" value="set-definition.xsd" />
			<param name="schema.version" value="0.1" />
			<param name="docbook.name" value="SetDefinitionXsd.xml" />
			<param name="stylesheet.name" value="CreateXsdDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>

	</target>
	<!-- end: build of set-definition documentation -->


	<!-- start: build of policy-decision-point documentation -->
	<target name="build-policy-decision-point">
		<antcall target="build-handler-documentation">
			<param name="resource" value="pdp" />
			<param name="component" value="aa" />
			<param name="document" value="_api_doc_AA_PolicyDecisionPoint" />
			<param name="descriptor" value="/de/escidoc/core/aa/servlet/pdp.xml" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of policy-decision-point documentation -->

	<!-- start: build of role documentation -->
	<target name="build-role">
		<antcall target="build-handler-documentation">
			<param name="resource" value="role" />
			<param name="component" value="aa" />
			<param name="document" value="_api_doc_AA_Role" />
			<param name="descriptor" value="/de/escidoc/core/aa/servlet/role.xml" />
			<param name="schema.name" value="role.xsd" />
			<param name="schema.version" value="0.4" />
			<param name="docbook.name" value="RoleXsd.xml" />
			<param name="stylesheet.name" value="createRoleDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of role documentation -->

	<!-- start: build of jhove documentation -->
	<target name="build-jhove">
		<antcall target="build-handler-documentation">
			<param name="resource" value="jhove" />
			<param name="component" value="tme" />
			<param name="document" value="_api_doc_TME_Jhove" />
			<param name="descriptor" value="/de/escidoc/core/tme/servlet/jhove.xml" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of role documentation -->

	<!-- start: build of user-account/grant  documentation -->
	<target name="build-user-account">
		<antcall target="grant-xsd">
			<param name="resource" value="user-account" />
			<param name="schema.name" value="grants.xsd" />
			<param name="schema.version" value="0.5" />
			<param name="docbook.name" value="GrantsXsd.xml" />
			<param name="stylesheet.name" value="createGrantsDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>
		<antcall target="build-handler-documentation">
			<param name="resource" value="user-account" />
			<param name="component" value="aa" />
			<param name="document" value="_api_doc_AA_UserAccount" />
			<param name="descriptor" value="/de/escidoc/core/aa/servlet/user-account.xml" />
			<param name="schema.name" value="user-account.xsd" />
			<param name="schema.version" value="0.7" />
			<param name="docbook.name" value="UserAccountXsd.xml" />
			<param name="stylesheet.name" value="createUserAccountDocbook.xsl" />
		</antcall>
	</target>
	<target name="build-user-group">
		<antcall target="build-handler-documentation">
			<param name="resource" value="user-group" />
			<param name="component" value="aa" />
			<param name="document" value="_api_doc_AA_UserGroup" />
			<param name="descriptor" value="/de/escidoc/core/aa/servlet/user-group.xml" />
			<param name="schema.name" value="user-group.xsd" />
			<param name="schema.version" value="0.6" />
			<param name="docbook.name" value="UserGroupXsd.xml" />
			<param name="stylesheet.name" value="createUserGroupDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>

	<target name="grant-xsd">
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.rest.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/aa/${documentation.basedir}/${docbook.dir}/${resource}/${interface.rest}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.soap.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/aa/${documentation.basedir}/${docbook.dir}/${resource}/${interface.soap}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
	</target>
	<!-- end: build of user-account/grant documentation -->

	<!-- start: build of statistic-data documentation -->
	<target name="build-statistic-data">
		<antcall target="build-handler-documentation">
			<param name="resource" value="statistic-data" />
			<param name="component" value="sm" />
			<param name="document" value="_api_doc_SM_StatisticData" />
			<param name="descriptor" value="/de/escidoc/core/sm/servlet/statistic-data.xml" />
			<param name="schema.name" value="statistic-data.xsd" />
			<param name="schema.version" value="0.3" />
			<param name="docbook.name" value="StatisticDataXsd.xml" />
			<param name="stylesheet.name" value="createStatisticDataDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of statistic-data documentation -->

	<!-- start: build of statistic-data-preprocessing documentation -->
	<target name="build-preprocessing">
		<antcall target="build-handler-documentation">
			<param name="resource" value="preprocessing" />
			<param name="component" value="sm" />
			<param name="document" value="_api_doc_SM_Preprocessing" />
			<param name="descriptor" value="/de/escidoc/core/sm/servlet/preprocessing.xml" />
			<param name="schema.name" value="preprocessing-information.xsd" />
			<param name="schema.version" value="0.3" />
			<param name="docbook.name" value="PreprocessingXsd.xml" />
			<param name="stylesheet.name" value="createPreprocessingDocbook.xsl" />
			<param name="draft.mode" value="no" />
		</antcall>
	</target>
	<!-- end: build of statistic-data-preprocessing documentation -->

	<!-- start: build of scope documentation -->
	<target name="build-scope">
		<antcall target="scope-list-xsd">
			<param name="resource" value="scope" />
			<param name="schema.name" value="scope-list.xsd" />
			<param name="schema.version" value="0.3" />
			<param name="docbook.name" value="ScopeListXsd.xml" />
			<param name="stylesheet.name" value="createScopeListDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>
		<antcall target="build-handler-documentation">
			<param name="resource" value="scope" />
			<param name="component" value="sm" />
			<param name="document" value="_api_doc_SM_Scope" />
			<param name="descriptor" value="/de/escidoc/core/sm/servlet/scope.xml" />
			<param name="schema.name" value="scope.xsd" />
			<param name="schema.version" value="0.3" />
			<param name="docbook.name" value="ScopeXsd.xml" />
			<param name="stylesheet.name" value="createScopeDocbook.xsl" />
		</antcall>
	</target>

	<target name="scope-list-xsd">
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.rest.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.rest}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.soap.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.soap}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
	</target>
	<!-- end: build of scope documentation -->

	<!-- start: build of aggregation-definition documentation -->
	<target name="build-aggregation-definition">
		<antcall target="aggregation-definition-list-xsd">
			<param name="resource" value="aggregation-definition" />
			<param name="schema.name" value="aggregation-definition-list.xsd" />
			<param name="docbook.name" value="AggregationDefinitionListXsd.xml" />
			<param name="stylesheet.name" value="createAggregationDefinitionListDocbook.xsl" />
			<param name="schema.version" value="0.3" />
			<param name="draft.mode" value="no"/>
		</antcall>
		<antcall target="build-handler-documentation">
			<param name="resource" value="aggregation-definition" />
			<param name="component" value="sm" />
			<param name="document" value="_api_doc_SM_AggregationDefinition" />
			<param name="descriptor" value="/de/escidoc/core/sm/servlet/aggregation-definition.xml" />
			<param name="schema.name" value="aggregation-definition.xsd" />
			<param name="docbook.name" value="AggregationDefinitionXsd.xml" />
			<param name="stylesheet.name" value="createAggregationDefinitionDocbook.xsl" />
			<param name="schema.version" value="0.3" />
		</antcall>
	</target>

	<target name="aggregation-definition-list-xsd">
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.rest.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.rest}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.soap.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.soap}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
	</target>
	<!-- end: build of aggregation-definition documentation -->

	<!-- start: build of report-definition documentation -->
	<!-- report-definition properties -->
	<property name="report-definition.schema.name" value="report-definition.xsd" />
	<property name="report-definition.docbook.name" value="ReportDefinitionXsd.xml" />
	<property name="report-definition.stylesheet.name" value="createReportDefinitionDocbook.xsl" />
	<property name="report-definition-document" value="_api_doc_SM_ReportDefinition" />

	<property name="report-definition-list.schema.name" value="report-definition-list.xsd" />
	<property name="report-definition-list.docbook.name" value="ReportDefinitionListXsd.xml" />
	<property name="report-definition-list.stylesheet.name" value="createReportDefinitionListDocbook.xsl" />

	<target name="build-report-definition">
		<antcall target="report-definition-list-xsd">
			<param name="resource" value="report-definition" />
			<param name="schema.name" value="${report-definition-list.schema.name}" />
			<param name="stylesheet.name" value="${report-definition-list.stylesheet.name}" />
			<param name="schema.version" value="0.3" />
			<param name="draft.mode" value="no"/>
		</antcall>
		<antcall target="build-handler-documentation">
			<param name="resource" value="report-definition" />
			<param name="component" value="sm" />
			<param name="document" value="${report-definition-document}" />
			<param name="descriptor" value="/de/escidoc/core/sm/servlet/report-definition.xml" />
			<param name="schema.name" value="${report-definition.schema.name}" />
			<param name="docbook.name" value="${report-definition.docbook.name}" />
			<param name="stylesheet.name" value="${report-definition.stylesheet.name}" />
			<param name="schema.version" value="0.3" />
		</antcall>
	</target>

	<target name="report-definition-list-xsd">
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.rest.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.rest}${report-definition-list.docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.soap.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.soap}${report-definition-list.docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
	</target>
	<!-- end: build of report-definition documentation -->

	<!-- start: build of report documentation -->
	<target name="build-report">
		<antcall target="report-parameters-xsd">
			<param name="resource" value="report" />
			<param name="schema.name" value="report-parameters.xsd" />
			<param name="docbook.name" value="ReportParametersXsd.xml" />
			<param name="stylesheet.name" value="createReportParametersDocbook.xsl" />
			<param name="schema.version" value="0.3" />
			<param name="draft.mode" value="no"/>
		</antcall>
		<antcall target="build-handler-documentation">
			<param name="resource" value="report" />
			<param name="component" value="sm" />
			<param name="document" value="_api_doc_SM_Report" />
			<param name="descriptor" value="/de/escidoc/core/sm/servlet/report.xml" />
			<param name="schema.name" value="report.xsd" />
			<param name="docbook.name" value="ReportXsd.xml" />
			<param name="stylesheet.name" value="createReportDocbook.xsl" />
			<param name="schema.version" value="0.3" />
		</antcall>
	</target>

	<target name="report-parameters-xsd">
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.rest.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.rest}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.soap.src.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${basedir}/sm/${documentation.basedir}/${docbook.dir}/${resource}/${interface.soap}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
	</target>
	<!-- end: build of report documentation -->

	<!-- start: build of Search documentation -->
	<target name="build-search">
		<antcall target="build-handler-documentation">
			<param name="resource" value="search-result" />
			<param name="component" value="sb" />
			<param name="document" value="_api_doc_SB_Search" />
			<param name="descriptor" value="/de/escidoc/sb/servlet/search-result.xml" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of search documentation -->

	<!-- start: build of ingest documentation -->
	<target name="build-ingest">
		<antcall target="build-handler-documentation">
			<param name="resource" value="ingest" />
			<param name="component" value="om" />
			<param name="document" value="_api_doc_OM_Ingest" />
			<param name="descriptor" value="/de/escidoc/core/om/servlet/ingest.xml" />
			<param name="docbook.name" value="ItemXsd.xml" />
			<param name="stylesheet.name" value="createIngestDocbook.xsl" />
			<param name="element" value="ingest" />
			<param name="title" value="Elements and attributes of Ingest interface" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of ingest documentation -->

	<!-- start: build of item documentation -->
	<target name="build-item">
		<antcall target="build-handler-documentation">
			<param name="resource" value="item" />
			<param name="component" value="om" />
			<param name="document" value="_api_doc_OM_Item" />
			<param name="descriptor" value="/de/escidoc/core/om/servlet/item.xml" />
			<param name="schema.name" value="item.xsd" />
			<param name="schema.version" value="0.10" />
			<param name="docbook.name" value="ItemXsd.xml" />
			<param name="stylesheet.name" value="createItemDocbook.xsl" />
			<param name="element" value="item" />
			<param name="title" value="Elements and attributes of Item" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of Item documentation -->

	<!-- start: build of Container documentation -->
	<target name="build-container">
		<antcall target="build-handler-documentation">
			<param name="component" value="om" />
			<param name="resource" value="container" />
			<param name="document" value="_api_doc_OM_Container" />
			<param name="descriptor" value="/de/escidoc/core/om/servlet/container.xml" />
			<param name="schema.name" value="container.xsd" />
			<param name="schema.version" value="0.9" />
			<param name="docbook.name" value="ContainerXsd.xml" />
			<param name="stylesheet.name" value="createContainerDocbook.xsl" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of container documentation -->

	<!-- start: build of SemanticStore documentation -->
	<target name="build-semanticstore">
		<antcall target="build-handler-documentation">
			<param name="resource" value="semanticstore" />
			<param name="component" value="om" />
			<param name="document" value="_api_doc_OM_SemanticStore" />
			<param name="descriptor" value="/de/escidoc/core/om/servlet/semanticstore.xml" />
			<param name="draft.mode" value="no"/>
		</antcall>
	</target>
	<!-- end: build of semanticstore documentation -->

	<!-- ================================================================================== -->

	<!--       common targets          -->
	<property name="fop-0.93.install.dir" value="build/lib/fop-0.93" />
	<property name="saxon-6.5.5.install.dir" value="build/lib/saxon-6.5.5" />
	<path id="classpath">
		<fileset dir="${fop-0.93.install.dir}" includes="**/*.jar" />
		<fileset dir="${saxon-6.5.5.install.dir}" includes="**/*.jar" />
		<fileset dir="build/lib" includes="**/log4j*.jar" />
		<fileset dir="escidoc-core.ear/META-INF/lib" includes="**/*.jar" />
		<dirset dir="escidoc-core.ear" includes="**/*.jar" />
		<dirset dir="build" includes="docbook/**/*" />
		<dirset dir="common" includes="**/*" />
	</path>

	<target name="build-handler-documentation">
		<antcall target="prepare-component" />
		<antcall target="${edition}-rest" />
		<antcall target="${edition}-soap" />
		<antcall target="copy-component-results" />
	</target>

	<target name="clean-component">
		<delete dir="${basedir}/${component}/${documentation.basedir}" failonerror="false" />
	</target>

	<target name="copy-component-results">
		<mkdir dir="${basedir}/${component}/${documentation.basedir}/${pdf.dir}/${resource}" />
		<mkdir dir="${basedir}/${component}/${documentation.basedir}/${docbook.dir}/${resource}" />
		<mkdir dir="${gen.docbook.dir}" />
		<mkdir dir="${gen.pdf.dir}" />
		<mkdir dir="${result.dir}" />
		<copy todir="${basedir}/${component}/${documentation.basedir}/${pdf.dir}/${resource}">
			<fileset dir="${result.dir}" />
		</copy>

		<copy todir="${basedir}/${component}/${documentation.basedir}/${docbook.dir}/${resource}" file="${gen.docbook.dir}/escidoc-logo.jpg" />
		<copy todir="${basedir}/${component}/${documentation.basedir}/${docbook.dir}/${resource}" file="${gen.docbook.dir}/by-nc_plain300.png" />

		<available file="${gen.docbook.dir}/${interface.rest}${document}.xml" property="rest.avaiable" />
		<antcall target="_process-document-rest">
			<param name="input-filename" value="${gen.docbook.dir}/${interface.rest}${document}.xml" />
			<param name="output-filename" value="${basedir}/${component}/${documentation.basedir}/${docbook.dir}/${resource}/${interface.rest}${document}.xml" />
		</antcall>

		<available file="${gen.docbook.dir}/${interface.soap}${document}.xml" property="soap.avaiable" />
		<antcall target="_process-document-soap">
			<param name="input-filename" value="${gen.docbook.dir}/${interface.soap}${document}.xml" />
			<param name="output-filename" value="${basedir}/${component}/${documentation.basedir}/${docbook.dir}/${resource}/${interface.soap}${document}.xml" />
		</antcall>
	</target>

	<target name="_process-document-rest" if="rest.avaiable">
		<antcall target="processXInclude">
			<param name="input-filename" value="${input-filename}" />
			<param name="output-filename" value="${output-filename}" />
			<param name="xslt.stylesheet" value="${basedir}/${xslt.src.dir}/copy.xsl" />
		</antcall>
		<replace file="${output-filename}" token="../../../../build/docbook/docbook-xml-4.1.2/docbookx.dtd" value="http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" />
		<replace file="${output-filename}" token="common/gen/documentation/docbook/escidoc-logo.jpg" value="escidoc-logo.jpg" />
		<replace file="${output-filename}" token="common/gen/documentation/docbook/by-nc_plain300.png" value="by-nc_plain300.png" />
	</target>

	<target name="_process-document-soap" if="soap.avaiable">
		<antcall target="processXInclude">
			<param name="input-filename" value="${input-filename}" />
			<param name="output-filename" value="${output-filename}" />
			<param name="xslt.stylesheet" value="${basedir}/${xslt.src.dir}/copy.xsl" />
		</antcall>
		<replace file="${output-filename}" token="../../../../build/docbook/docbook-xml-4.1.2/docbookx.dtd" value="http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" />
		<replace file="${output-filename}" token="common/gen/documentation/docbook/escidoc-logo.jpg" value="escidoc-logo.jpg" />
		<replace file="${output-filename}" token="common/gen/documentation/docbook/by-nc_plain300.png" value="by-nc_plain300.png" />
	</target>

	<target name="prepare-component">
		<mkdir dir="${basedir}/${component}/${documentation.basedir}" />
		<mkdir dir="${basedir}/${component}/${documentation.basedir}/${pdf.dir}" />
		<mkdir dir="${basedir}/${component}/${documentation.basedir}/${docbook.dir}" />

		<delete dir="${gen.docbook.dir}" failonerror="false" />
		<delete dir="${gen.pdf.dir}" failonerror="false" />
		<delete dir="${result.dir}" failonerror="false" />
		<mkdir dir="${gen.docbook.dir}" />
		<mkdir dir="${gen.pdf.dir}" />
		<mkdir dir="${result.dir}" />
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${basedir}/common/${src.docbook.basedir}/common" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${basedir}/${component}/${src.docbook.basedir}/${component}" />
		</copy>
		<copy todir="${gen.docbook.dir}" failonerror="false">
			<fileset dir="${basedir}/${component}/${documentation.basedir}/${docbook.dir}/${resource}" />
		</copy>

		<copy todir="${gen.docbook.dir}" file="${basedir}/${component}/src/${descriptor}" failonerror="false" />
	</target>

	<target name="clean-all">
		<antcall target="clean-component">
			<param name="component" value="common" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="aa" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="adm" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="cmm" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="om" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="oai" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="oum" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="sb" />
		</antcall>
		<antcall target="clean-component">
			<param name="component" value="st" />
		</antcall>
	</target>

	<target name="full-rest">
		<antcall target="create">
			<param name="checkVisibility" value="false" />
			<param name="prefix" value="${prefix.full}" />
			<param name="interface" value="${interface.rest}" />
			<param name="schemas.dir" value="${schemas.rest.src.dir}" />
		</antcall>
	</target>
	<target name="full-soap">
		<antcall target="create">
			<param name="checkVisibility" value="false" />
			<param name="prefix" value="${prefix.full}" />
			<param name="interface" value="${interface.soap}" />
			<param name="schemas.dir" value="${schemas.soap.src.dir}" />
		</antcall>
	</target>

	<target name="filtered-rest">
		<antcall target="create">
			<param name="checkVisibility" value="true" />
			<param name="prefix" value="${prefix.filtered}" />
			<param name="interface" value="${interface.rest}" />
			<param name="schemas.dir" value="${schemas.rest.src.dir}" />
		</antcall>
	</target>
	<target name="filtered-soap">
		<antcall target="create">
			<param name="checkVisibility" value="true" />
			<param name="prefix" value="${prefix.filtered}" />
			<param name="interface" value="${interface.soap}" />
			<param name="schemas.dir" value="${schemas.soap.src.dir}" />
		</antcall>
	</target>

	<target name="create">
		<antcall target="create-component">
			<param name="component" value="${component}" />
			<param name="checkVisibility" value="${checkVisibility}" />
			<param name="document" value="${interface}${document}" />
			<param name="prefix" value="${prefix}" />
			<param name="version" value="${build.version}" />
		</antcall>
	</target>

	<target name="create-component">
		<!-- TODO start: remove call to target xsd-xslt-transformation if new xsd documentation generation works properly  -->
		<!-- 
		<antcall target="xsd-xslt-transformation">
			<param name="input-filename" value="${schemas.dir}/${resource}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${schemas.build.dir}/${interface}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/${stylesheet.name}" />
			<param name="extension" value=".xsd" />
		</antcall>
		-->
		<!-- TODO end -->
		<propertyregex property="resource-r"
		               input="${resource}"
		               regexp="(preprocessing)"
		               replace="\1-information"/>
		<antcall target="xsd-xslt-transformation-new">
			<param name="input-filename" value="${schemas.dir}/${resource-r}/${schema.version}/${schema.name}" />
			<param name="output-filename" value="${schemas.build.dir}/${interface}${docbook.name}" />
			<param name="xslt.stylesheet" value="${xslt.src.dir}/CreateXsdDocbook.xsl" />
			<param name="extension" value=".xsd" />
		</antcall>
		<antcall target="build-dbdoclet">
			<param name="checkVisibility" value="${checkVisibility}" />
		</antcall>
		<antcall target="create-fo">
			<param name="document" value="${document}" />
		</antcall>
		<antcall target="create-pdf">
			<param name="document" value="${document}" />
		</antcall>
		<copy file="${gen.pdf.dir}/${document}.pdf" tofile="${result.dir}/${prefix}${document}.${version}.pdf" failonerror="false" />

		<!-- TODO uncomment this to generate rtf documents -->
		<!--
			<antcall target="create-rtf">
			<param name="document" value="${interface}${document}" />
			</antcall>
			<copy file="${gen.docbook.dir}/${document}.rtf" tofile="${result.dir}/${prefix}${document}.${version}.rtf" failonerror="false" />
		-->
		<!-- TODO end -->
	</target>

	<!-- Start: Generation of docbook documentation from javadoc -->
	<target name="build-dbdoclet">
		<antcall target="dbdoclet" />
		<replace file="${gen.docbook.dir}/${dbdoclet.document}" token="DocBook XML V4.5" value="DocBook V4.1.2" />
		<replace file="${gen.docbook.dir}/${dbdoclet.document}" token="http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" value="../../../../build/docbook/docbook-xml-4.1.2/docbookx.dtd" />
		<replace file="${gen.docbook.dir}/${dbdoclet.document}" token="&lt;?xml version='1.0' encoding='UTF-8'?>" value=" " />

		<!-- Formatting db-doclet output -->
		<!-- Formatting the itemized list -->
		<replace file="${gen.docbook.dir}/${dbdoclet.document}" token="&lt;itemizedlist>" value="&lt;itemizedlist mark=&quot;opencircle&quot; spacing=&quot;compact&quot;>" />
		<replace file="${gen.docbook.dir}/${dbdoclet.document}" token="&lt;code> = " value="&lt;code>" />

		<replace file="${gen.docbook.dir}/${xsl.dbdoclet.master.document}" token="{JAVADOC}" value="${gen.docbook.dir}/${dbdoclet.document}" />
		<replace file="${gen.docbook.dir}/${xsl.dbdoclet.master.document}" token="{DESCRIPTOR}" value="${gen.docbook.dir}/${resource}.xml" />

		<antcall target="processXInclude">
			<param name="input-filename" value="${gen.docbook.dir}/${xsl.dbdoclet.master.document}" />
			<param name="output-filename" value="${gen.docbook.dir}/${interface}XslApi.xml" />
			<param name="xslt.stylesheet" value="${basedir}/${xslt.src.dir}/${interface}${xsl.dbdoclet.stylesheet}" />
			<param name="checkVisible" value="${checkVisibility}" />
		</antcall>
	</target>
	<!-- End: Generation of docbook documentation from javadoc -->

	<target name="create-fo">
		<echo level="info">
			Generating ${gen.docbook.dir}/${document}.fo
		</echo>
		<java classname="com.icl.saxon.StyleSheet" classpathref="classpath" output="${gen.docbook.dir}/${document}-create-fo.log" fork="true" dir="${gen.docbook.dir}/..">
			<!-- jvmarg line="-Xmx512M -Xms64m" / -->
			<!-- jvmarg line="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration" / -->
			<arg value="-o" />
			<arg value="${gen.pdf.dir}/${document}.fo" />
			<arg value="${gen.docbook.dir}/${document}.xml" />
			<arg value="${basedir}/build/docbook/EscidocDocbook.xsl" />
			<arg value="draft.mode=${draft.mode}" />
			<arg value="draft.watermark.image=build/docbook/draft-experimental.png"/>
		</java>
		<available file="${gen.pdf.dir}/${document}.fo" property="foIsAvail" />
		<if>
			<isset property="foIsAvail" />
			<then>
				<replace file="${gen.pdf.dir}/${document}.fo" token="{BUILD.VERSION}" value="${build.version}" />
				<replace file="${gen.pdf.dir}/${document}.fo" token="{BUILD.DATE}" value="${build.date}" />
			</then>
		</if>
	</target>

	<target name="create-rtf">
		<echo level="info">
			Generating ${gen.pdf.dir}/${document}.rtf
		</echo>
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop-0.93.install.dir}" includes="**/*.jar" />
			</classpath>
		</taskdef>
		<echo level="info">
			Creating ${gen.pdf.dir}/${document}.rtf
		</echo>
		<fop fofile="${gen.pdf.dir}/${document}.fo" format="rtf" outfile="${gen.pdf.dir}/${document}.rtf" />
	</target>

	<target name="create-pdf">
		<echo level="info">
			Generating ${gen.pdf.dir}/${document}.pdf
		</echo>
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop-0.93.install.dir}" includes="**/*.jar" />
			</classpath>
		</taskdef>
		<echo level="info">
			Creating ${gen.pdf.dir}/${document}.pdf
		</echo>
		<fop fofile="${gen.pdf.dir}/${document}.fo" outfile="${gen.pdf.dir}/${document}.pdf" format="pdf" />
	</target>

	<target name="xsd-xslt-transformation-new" if="schema.name">
		<xslt in="${input-filename}" out="${output-filename}" extension="${extension}" style="${xslt.stylesheet}" force="true">
			<classpath location="lib/saxon8.jar" />
			<param name="element" expression="${element}" />
			<param name="title" expression="${title}" />
            <param name="schemaLocationBase" expression="${escidoc.schemaLocation.base}" />
            <param name="schemaLocationBaseReplacement" expression="http://${escidoc.server.name}:${escidoc.server.port}${escidoc.xsd.path}" />
		</xslt>
	</target>

	<target name="xsd-xslt-transformation" if="schema.name">
		<xslt in="${input-filename}" out="${output-filename}" extension="${extension}" style="${xslt.stylesheet}" force="true">
			<classpath location="lib/saxon8.jar" />
            <param name="schemaLocationBase" expression="${escidoc.schemaLocation.base}" />
		</xslt>
	</target>

	<target name="xslt-api-transformation">
		<xslt in="${input-filename}" out="${output-filename}" extension="${extension}" style="${xslt.stylesheet}" force="true">
			<classpath location="lib/saxon8.jar" />
            <param name="schemaLocationBase" expression="${escidoc.schemaLocation.base}" />
            <param name="schemaLocationBaseReplacement" expression="http://${escidoc.server.name}:${escidoc.server.port}${escidoc.xsd.path}" />
		</xslt>
	</target>

	<!-- Generate JavaDoc in docbook format using dbdoclet -->
	<target name="dbdoclet">
		<javadoc maxmemory="1024m" access="public" additionalparam="-d ${gen.docbook.dir} -f ${dbdoclet.document} -booktype book -id numbered -nostatistics -part" packagenames="${dbdoclet.exception.packages},${dbdoclet.component.packages}">
			<sourcepath>
				<pathelement location="common/src" />
				<pathelement location="common/gen" />
				<pathelement location="aa/src" />
				<pathelement location="aa/gen" />
				<pathelement location="adm/src" />
				<pathelement location="adm/gen" />
				<pathelement location="cmm/src" />
				<pathelement location="cmm/gen" />
				<pathelement location="oai/src" />
				<pathelement location="om/src" />
				<pathelement location="om/gen" />
				<pathelement location="oum/src" />
				<pathelement location="oum/gen" />
				<pathelement location="sb/src" />
				<pathelement location="sb/gen" />
				<pathelement location="sm/src" />
				<pathelement location="sm/gen" />
				<pathelement location="st/src" />
				<pathelement location="st/gen" />
				<pathelement location="tme/src" />
				<pathelement location="tme/gen" />
			</sourcepath>
			<classpath>
				<fileset dir="build/lib" includes="**/*.jar" />
				<fileset dir="escidoc-core.ear/META-INF/lib" includes="**/*.jar" />
			</classpath>
			<doclet name="org.dbdoclet.doclet.docbook.DocBookDoclet" path="build/lib/dbdoclet/dbdoclet-jdk1_5.jar" />
		</javadoc>
	</target>


	<!-- ==================================================== -->
	<!-- XInclude processor                                   -->
	<!-- ==================================================== -->
	<property name="xalan.processor.class" value="org.apache.xalan.xslt.Process" />
	<path id="xalan.processor.classpath">
		<fileset dir="build/lib/xerces-2.6.2" includes="**/*.jar" />
		<fileset dir="build/lib" includes="**/*.jar" />
	</path>

	<target name="processXInclude">
		<echo message="Processing Document ${input-filename} to Document ${output-filename}" level="info" />
		<java classname="${xalan.processor.class}" fork="true" dir="${gen.docbook.dir}" failonerror="true">
			<classpath refid="xalan.processor.classpath" />
			<jvmarg line="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration" />
			<arg line="-URIRESOLVER com.sun.resolver.tools.CatalogResolver" />
			<arg line="-ENTITYRESOLVER com.sun.resolver.tools.CatalogResolver" />
			<arg value="-IN" />
			<arg value="${input-filename}" />
			<arg value="-OUT" />
			<arg value="${output-filename}" />
			<arg value="-XSL" />
			<arg value="${xslt.stylesheet}" />
			<arg value="-PARAM" />
			<arg value="checkVisible" />
			<arg value="${checkVisible}" />
		</java>
	</target>
</project>
