<?xml version="1.0" encoding="UTF-8"?>

<project name="eSciDoc infrastructure - unpack core package" default="build">

  <basename property="DatabaseDriverFile" file="${DatabaseDriver}" />

  <condition property="upgradeEscidoc">
    <istrue value="${UpgradeEscidoc}" />
  </condition>

  <condition property="databaseIsOracle">
    <istrue value="${DatabaseIsOracle}" />
  </condition>

  <condition property="removeJmxConsole">
    <istrue value="${RemoveJmxConsole}" />
  </condition>

  <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <tstamp>
    <format property="timestamp" pattern="yyyy-MM-dd_HH-mm-ss" />
  </tstamp>

  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" />

  <target name="build" description="Installs WildFly with patches, Fedora, and escidoc-core">
    <echo level="info">Unpack and install eSciDoc Infrastructure</echo>
    <antcall target="wildfly" />
    <antcall target="wildfly-config" />
    <antcall target="fedora" />
    <antcall target="escidoc-core" />
    <!-- antcall target="escidoc-examples" / -->
    <antcall target="escidoc-admin" />
    <!-- Following line is commented out because it will be invoked as separate Ant call -->
    <!-- Initializing the database is an optional task, therefore it should not be part  -->
    <!-- of the default build target. See EscidocAntAction.xml for further details       -->
    <!--antcall target="db-create-scripts" /-->
    <antcall target="fedoragsearch" />
    <antcall target="srw" />
    <antcall target="saxon" />
  </target>

  <target name="init" description="Intialize runtime environment">
    <property name="install.dir" location="${INSTALL_PATH}" />
    <property name="wildfly" value="wildfly-8.2.1.Final" />
    <property name="escidoc.core.zip" value="escidoc-core-${EscidocVersion}-bin.zip" />
    <property name="escidoc.examples.zip" value="escidoc-examples-${EscidocVersion}.zip" />
    <property name="escidoc.sources.zip" value="escidoc-core-${EscidocVersion}-src.zip" />
    <property name="escidoc.admin.zip" value="migration-tool-${migration-tool.version}.zip" />
    <property name="digilib.server.war" value="DigilibServer.war" />
    <property name="digilib.client.war" value="DigilibClient.war" />
  </target>

  <target name="copy-oracle-jdbc-jar" if="databaseIsOracle">
    <copy file="${DatabaseDriver}" todir="${install.dir}/install.tmp/" />
    <copy file="${DatabaseDriver}" todir="${install.dir}/install.tmp/WEB-INF/lib/" />
  </target>

  <target name="wildfly" depends="init" description="Installs WildFly Application Server" unless="upgradeEscidoc">
    <!-- unpack WildFly ZIP file -->
    <echo level="info">Unpack WildFly</echo>
    <antcall target="unpack">
      <param name="zipfile" value="${install.dir}/install.tmp/${wildfly}.zip" />
      <param name="target.dir" value="${install.dir}" />
    </antcall>
    <antcall target="rename">
      <param name="source" value="${install.dir}/${wildfly}" />
      <param name="target" value="${install.dir}/wildfly" />
    </antcall>
  </target>

  <target name="jboss-oracle" depends="copy-oracle-jdbc-jar" if="databaseIsOracle">
    <!--
  	<copy file="${install.dir}/install.tmp/${DatabaseDriverFile}" todir="${install.dir}/jboss/server/default/lib/" />
  	-->
  </target>

  <target name="wildfly-config" depends="init" description="Installs WildFly config">
    <!-- copy WildFly config -->
    <echo level="info">Copy WildFly configuration</echo>
  	
    <antcall target="move-with-save">
      <param name="sourceDir" value="${install.dir}/install.tmp/wildfly_config" />
      <param name="targetDir" value="${install.dir}" />
    </antcall>
    
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/escidoc-core.custom.properties" />
      <param name="target" value="${install.dir}/wildfly/modules/escidoc/main/escidoc-core.custom.properties" />
    </antcall>

  	<delete dir="${install.dir}/install.tmp/wildfly_config" />
  	
    <chmod dir="${install.dir}/wildfly/bin" perm="ugo+rx" includes="*.sh" />
  	
  	<move file="${install.dir}/wildfly/standalone/configuration/standalone.xml" tofile="${install.dir}/wildfly/standalone/configuration/standalone.xml.bak" failonerror="true"/>
  	
  	<!-- Set spec-descriptor-property-replacement to true. This is important for web.xml of fedora.war which contains placeholders for fedora.home -->
  	<xmltask source="${install.dir}/wildfly/standalone/configuration/standalone.xml.bak" dest="${install.dir}/wildfly/standalone/configuration/standalone.xml"
  	                      failWithoutMatch="true">	                      
  		<replace path="//*[local-name()='spec-descriptor-property-replacement']/text()" withText="true" />                 
  	</xmltask>
  </target>

	<!--
  <target name="jboss-jmx-console" depends="init" description="Removes JBoss JMX- and WEB-Console">
    <echo level="info">Remove JBoss JMX- and WEB-Console</echo>
    <if>
      <equals arg1="${removeJmxConsole}" arg2="true" />
      <then>
        <antcall target="move-dir-without-save">
          <param name="sourceDir" value="${install.dir}/jboss/server/default/deploy/jmx-console.war" />
          <param name="targetDir" value="${install.dir}/jboss/server/default" />
        </antcall>
        <antcall target="move-dir-without-save">
          <param name="sourceDir" value="${install.dir}/jboss/server/default/deploy/management" />
          <param name="targetDir" value="${install.dir}/jboss/server/default" />
        </antcall>
      </then>
    </if>

    <if>
      <and>
        <equals arg1="${upgradeEscidoc}" arg2="true" />
        <not>
          <equals arg1="${removeJmxConsole}" arg2="true" />
        </not>
      </and>
      <then>
        <antcall target="move-dir-without-save">
          <param name="sourceDir" value="${install.dir}/jboss/server/default/jmx-console.war" />
          <param name="targetDir" value="${install.dir}/jboss/server/default/deploy" />
        </antcall>
        <antcall target="move-dir-without-save">
          <param name="sourceDir" value="${install.dir}/jboss/server/default/management" />
          <param name="targetDir" value="${install.dir}/jboss/server/default/deploy" />
        </antcall>
      </then>
    </if>
  </target>
  -->

  <target name="move-jboss-script" description="moves some jboss scripts to the bin directory of jboss manipulating them by setting the JDK to use">
    <antcall target="move-file-with-save">
      <param name="source" value="${source}" />
      <param name="target" value="${target}" />
    </antcall>
    <condition property="useJDK">
      <and>
        <isfalse value="${JdkUseJavaHome}" />
        <available file="${JdkHome}" type="dir" />
      </and>
    </condition>
    <antcall target="use-java-home">
      <param name="target" value="${target}" />
    </antcall>
    <antcall target="use-user-jdk">
      <param name="target" value="${target}" />
    </antcall>
  </target>

  <target name="use-java-home" unless="useJDK" description="removes the setting of a JDK in the specified script">
    <replace file="${target}" token="set JAVA_HOME={JDK_PATH}" value="" />
    <replace file="${target}" token='set JAVA_HOME="{JDK_PATH}"' value="" />
    <replace file="${target}" token="SET JAVA_HOME={JDK_PATH}" value="" />
    <replace file="${target}" token='SET JAVA_HOME="{JDK_PATH}"' value="" />
    <replace file="${target}" token='JAVA_HOME="{JDK_PATH}"' value="" />
    <replace file="${target}" token="JAVA_HOME={JDK_PATH}" value="" />
  </target>

  <target name="use-user-jdk" if="useJDK" description="sets the specified JDK as the JAVA_HOME to use in the specified script">
    <replace file="${target}" token="{JDK_PATH}" value="${JdkHome}" />
  </target>

 

  <!-- Fedora -->
  <target name="fedora" depends="init, copy-oracle-jdbc-jar" description="Installs Fedora Commons Repository">
    <!-- unpack Fedora ZIP file -->
    <echo level="info">Unpack Fedora</echo>
    <move file="${install.dir}/fedora" tofile="${install.dir}/fedora-${timestamp}" failonerror="false" />
    <antcall target="unpack">
      <param name="zipfile" value="${install.dir}/install.tmp/fedora-fedora.zip" />
      <param name="target.dir" value="${install.dir}/fedora" />
    </antcall>
    <move file="${install.dir}/fedora-${timestamp}/data/objects" tofile="${install.dir}/fedora/data/objects" failonerror="false" />
    <move file="${install.dir}/fedora-${timestamp}/data/datastreams" tofile="${install.dir}/fedora/data/datastreams" failonerror="false" />
  	
  	<!--
  	<move file="${install.dir}/install.tmp/fedora.war" tofile="${install.dir}/install.tmp/fedora.bak.war" failonerror="true"/>
  	<delete file="${install.dir}/install.tmp/fedora.war" failonerror="true"/>
  	<jar destfile="${install.dir}/install.tmp/fedora.war">
  		<zipfileset src="${install.dir}/install.tmp/fedora.bak.war" excludes="WEB-INF/lib/xercesImpl-2.9.1.jar,
  																				WEB-INF/lib/xml-apis-1.3.04.jar,
  																				WEB-INF/lib/jersey-core-1.0.3.1.jar,
  																				WEB-INF/lib/jersey-bundle-1.0.3.1.jar,
																	  			WEB-INF/lib/jersey-multipart-1.0.3.1.jar,
																	  			WEB-INF/lib/jackson-core-asl-1.5.2.jar,
																	  			WEB-INF/lib/jackson-mapper-asl-1.5.2.jar,
  																				WEB-INF/web.xml"/>
  		
  		<fileset  dir="${install.dir}/install.tmp/fedora_config/" includes="WEB-INF/web.xml,WEB-INF/jboss-deployment-structure.xml,WEB-INF/lib/**"/>

  	</jar>
  	-->
  		
    <!-- patch fedora.war by replacing web.xml with customized version -->
    
    <jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/web.xml" />
  	<!-- patch fedora.war by adding a jboss-deployment-structure.xml -->
  	  
  	<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/jboss-deployment-structure.xml" />
  	
  
    <!-- patch fedora.war by adding the database driver -->
    <!--
  	<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/${DatabaseDriverFile}" />
    <jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/${OracleDDLGenerator}" />
    -->
    
  	<!-- patch fedora.war by adding jaxp-jar -->
  	<!--
  		<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/jaxp-ri-1.4.5.jar" />
  	
  	<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/jersey-core-1.19.jar" />
	<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/jersey-bundle-1.19.jar" />
	<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/jersey-multipart-1.19.jar" />
	<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/jackson-core-asl-1.9.2.jar" />
	<jar basedir="${install.dir}/install.tmp/fedora_config" update="yes" destfile="${install.dir}/install.tmp/fedora.war" includes="WEB-INF/lib/jackson-mapper-asl-1.9.2.jar" />
  	<jar destfile="${install.dir}/install.tmp/fedora.war"  excludesfile="WEB-INF/lib/jersey-core-1.0.3.1.jar" update="yes"/>
  	<jar destfile="${install.dir}/install.tmp/fedora.war" excludesfile="WEB-INF/lib/jersey-bundle-1.0.3.1.jar" update="yes"/>
  	<jar destfile="${install.dir}/install.tmp/fedora.war" excludesfile="WEB-INF/lib/jersey-multipart-1.0.3.1.jar" update="yes"/>
  	<jar destfile="${install.dir}/install.tmp/fedora.war" excludesfile="WEB-INF/lib/jackson-core-asl-1.5.2.jar" update="yes"/>
  	<jar destfile="${install.dir}/install.tmp/fedora.war" excludesfile="WEB-INF/lib/jackson-mapper-asl-1.5.2.jar" update="yes"/>
  		-->
    <!-- deploy fedora.war in JBoss -->
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/fedora.war" />
      <param name="target" value="${install.dir}/wildfly/standalone/deployments/fedora.war" />
    </antcall>
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/fedora_config/fedora-users.xml" />
      <param name="target" value="${install.dir}/fedora/server/config/fedora-users.xml" />
    </antcall>
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/fedora_config/fedora.fcfg" />
      <param name="target" value="${install.dir}/fedora/server/config/fedora.fcfg" />
    </antcall>
  	
  	<antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/fedora_config/log4j.properties" />
      <param name="target" value="${install.dir}/fedora/server/config/log4j.properties" />
    </antcall>
    
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/fedora_config/deny-everything-if-not-administrator.xml" />
      <param name="target" value="${install.dir}/fedora/data/fedora-xacml-policies/repository-policies/deny-everything-if-not-administrator.xml" />
    </antcall>
  	
  	<antcall target="move-file-with-save">
  	  <param name="source" value="${install.dir}/install.tmp/fedora_config/env-server.sh" />
  	  <param name="target" value="${install.dir}/fedora/server/bin/env-server.sh" />
  	</antcall>
  	
  	<antcall target="move-file-with-save">
  	  <param name="source" value="${install.dir}/install.tmp/fedora_config/env-server.bat" />
  	  <param name="target" value="${install.dir}/fedora/server/bin/env-server.bat" />
  	</antcall>
  	
    <antcall target="unpack">
        <param name="zipfile" value="${install.dir}/install.tmp/fedora_config/apache-tomcat-8.0.28.zip" />
        <param name="target.dir" value="${install.dir}/fedora" />
    </antcall>
    <antcall target="rename">
        <param name="source" value="${install.dir}/fedora/apache-tomcat-8.0.28" />
        <param name="target" value="${install.dir}/fedora/tomcat" />
    </antcall>
  	
    <delete file="${install.dir}/install.tmp/fedora-fedora.zip" />
    <delete dir="${install.dir}/install.tmp/fedora_config" />
    <chmod dir="${install.dir}/fedora/client/bin" perm="ugo+rx" includes="*.sh" />
    <chmod dir="${install.dir}/fedora/server/bin" perm="ugo+rx" includes="*.sh" />
  	<chmod dir="${install.dir}/fedora/tomcat/bin" perm="ugo+rx" includes="*.sh" />
  	
  	<!-- Move complete fedora dir to wildfly/modules -->
  	<!--
  	<antcall target="move-dir-without-save">
      <param name="sourceDir" value="${install.dir}/fedora" />
      <param name="targetDir" value="${install.dir}/wildfly/modules" />
  	</antcall>
  	-->
  </target>

  <target name="admintool" depends="init" description="Installs Admin Tool">
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/tools/AdminTool-${admin-tool.version}.war" />
      <param name="target" value="${install.dir}/wildfly/standalone/deployments/AdminTool.war" />
    </antcall>
  </target>

  <target name="fedoragsearch" depends="init" description="Installs Fedora GSearch">
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/services/fedoragsearch-${escidoc.fedoragsearch.version}.war" />
      <param name="target" value="${install.dir}/wildfly/standalone/deployments/fedoragsearch.war" />
    </antcall>
  </target>

  <target name="srw" depends="init" description="Installs Search and Retrieval Webservice">
    <!-- add isolation -->
    <!--
  	<jar basedir="${install.dir}/install.tmp/srw" update="yes" destfile="${install.dir}/services/srw-${escidoc.srw.version}.war" includes="WEB-INF/jboss-web.xml" />
    -->
  	<antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/services/srw-${escidoc.srw.version}.war" />
      <param name="target" value="${install.dir}/wildfly/standalone/deployments/srw.war" />
    </antcall>
  </target>

	
	 <target name="saxon" depends="init" description="Installs Saxon Webservice">
    <!-- add isolation -->
	 <!--
  	<jar basedir="${install.dir}/install.tmp/saxon" update="yes" destfile="${install.dir}/services/saxon-${escidoc.saxon.version}.war" includes="WEB-INF/jboss-web.xml" />
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/services/saxon-${escidoc.saxon.version}.war" />
      <param name="target" value="${install.dir}/jboss/server/default/deploy/saxon.war" />
    </antcall>
  	-->
  </target>

  <target name="escidoc-core" depends="init" description="Installs eSciDoc Core Services">
    <!-- unpack escidoc-core ZIP file -->
    <echo level="info">Unpack eSciDoc Core Services</echo>
    <antcall target="unpack">
      <param name="zipfile" value="${install.dir}/install.tmp/${escidoc.core.zip}" />
      <!-- uncomment if escidoc-core ZIP file contains a base directory -->
      <param name="target.dir" value="${install.dir}" />
      <!-- uncomment if escidoc-core ZIP file contains no base directory -->
      <!--param name="target.dir" value="${install.dir}/escidoc-core-bin-${EscidocVersion}" /-->
    </antcall>
    <antcall target="rename">
      <param name="source" value="${install.dir}/escidoc-core-${EscidocVersion}" />
      <param name="target" value="${install.dir}/core" />
    </antcall>
    <delete file="${install.dir}/install.tmp/${escidoc.core.zip}" />
    <!-- Delete old admin.jsp. -->
    <!--<delete dir="${install.dir}/jboss/server/default/work/jboss.web/localhost/_" />-->
    <!-- move file="${install.dir}/jboss/server/default/deploy/escidoc-core.ear" tofile="${install.dir}/jboss/server/default/deploy/escidoc-core.ear-${timestamp}" /-->
    <move tofile="${install.dir}/wildfly/standalone/deployments/escidoc-core.ear">
      <fileset dir="${install.dir}/core/ear">
        <include name="escidoc-core*.ear" />
      </fileset>
    </move>
    <move file="${install.dir}/core/license/ESCIDOC.LICENSE" todir="${install.dir}" />
    <move file="${install.dir}/core/doc" tofile="${install.dir}/core/doc-${timestamp}" failonerror="false" />
    <move todir="${install.dir}/core/doc">
      <fileset dir="${install.dir}/core/ontologies" />
    </move>
    <move todir="${install.dir}/core/doc/xsd">
      <fileset dir="${install.dir}/core/xsd" />
    </move>
    <delete dir="${install.dir}/core/ear" />
    <delete dir="${install.dir}/core/xsd" />
    <delete dir="${install.dir}/core/license" />
  </target>

  <target name="escidoc-examples" depends="init" description="Installs eSciDoc Examples">
    <!-- unpack escidoc-examples ZIP file -->
    <echo level="info">Unpack eSciDoc Examples</echo>
    <antcall target="unpack">
      <param name="zipfile" value="${install.dir}/install.tmp/${escidoc.examples.zip}" />
      <!-- uncomment if escidoc-examples ZIP file contains a base directory -->
      <param name="target.dir" value="${install.dir}/core" />
      <!-- uncomment if escidoc-examples ZIP file contains no base directory -->
      <!-- param name="target.dir" value="${install.dir}/core/escidoc-core-bin-${EscidocVersion}" /-->
    </antcall>
    <antcall target="rename">
      <param name="source" value="${install.dir}/core/escidoc-examples-${EscidocVersion}" />
      <param name="target" value="${install.dir}/core/examples" />
    </antcall>
    <move file="${install.dir}/install.tmp/readme.txt" todir="${install.dir}/core/examples" />
    <delete file="${install.dir}/install.tmp/${escidoc.examples.zip}" />
    <delete file="${install.dir}/core/examples/common/foxml1.1/readme.txt" />
    <delete file="${install.dir}/core/examples/mpdl/readme.txt" />
  </target>

  <target name="escidoc-admin" depends="init" description="Installs eSciDoc Migration Tool" if="upgradeEscidoc">
    <!-- unpack escidoc-admin ZIP file -->
    <echo level="info">Unpack eSciDoc Migration Tool</echo>
    <antcall target="unpack">
      <param name="zipfile" value="${install.dir}/tools/${escidoc.admin.zip}" />
      <param name="target.dir" value="${install.dir}" />
    </antcall>
    <antcall target="rename">
      <param name="source" value="${install.dir}/escidoc-core-admin-${migration-tool.version}" />
      <param name="target" value="${install.dir}/tools/migration/" />
    </antcall>
    <delete file="${install.dir}/tools/${escidoc.admin.zip}" />
    <!-- modify admin-tool.properties -->
    <propertyfile file="${INSTALL_PATH}/tools/migration/admin-tool.properties">
      <entry key="datasource.url" value="${DatabaseURL}${DatasourceEscidoc}" />
      <entry key="datasource.driverClassName" value="${DatabaseDriverClass}" />
      <entry key="datasource.username" value="${DatabaseUsername}" />
      <entry key="datasource.password" value="${DatabasePassword}" />
      <entry key="fedora.url" value="http://localhost:${EscidocPort}/fedora" />
      <entry key="fedora.user" value="${FedoraUsername}" />
      <entry key="fedora.password" value="${FedoraPassword}" />
      <entry key="creator_id" value="${CreatorUserid}" />
    </propertyfile>
  </target>

  <target name="db-create-scripts" depends="init, copy-oracle-jdbc-jar" description="Prepare for database creation" unless="upgradeEscidoc">
    <!-- prepare for database creation -->
    <echo level="info">Prepare for database creation</echo>
    <move file="${install.dir}/install.tmp/database.properties" todir="${install.dir}/core/etc" />
    <move file="${install.dir}/install.tmp/database-init.xml" todir="${install.dir}/core/bin" />
    <move file="${install.dir}/install.tmp/aa.init.user-accounts.common.sql" todir="${install.dir}/core/sql" />
    <move file="${install.dir}/install.tmp/aa.init.grants.common.sql" todir="${install.dir}/core/sql" />
    <move file="${install.dir}/install.tmp/${DatabaseDriverFile}" todir="${install.dir}/core/lib" />
    <delete dir="${install.dir}/install.tmp/staging" />
    <delete dir="${install.dir}/install.tmp/WEB-INF" />
    <!--delete dir="${install.dir}/install.tmp" /-->
  </target>

  <target name="create-db" description="create database escidoc-core" unless="upgradeEscidoc">
    <ant antfile="${INSTALL_PATH}/core/bin/database-init.xml" target="create-db">
      <property file="${INSTALL_PATH}/core/etc/database.properties" />
    </ant>
  </target>

  <target name="create-tables" description="create all database tables" unless="upgradeEscidoc">
    <ant antfile="${INSTALL_PATH}/core/bin/database-init.xml" target="create-tables">
      <property file="${INSTALL_PATH}/core/etc/database.properties" />
    </ant>
  </target>

  <target name="create-roles" description="create users and roles" unless="upgradeEscidoc">
    <ant antfile="${INSTALL_PATH}/core/bin/database-init.xml" target="create-roles">
      <property file="${INSTALL_PATH}/core/etc/database.properties" />
    </ant>
  </target>
	
	<!--
	<target name="rebuild-fedora-db" description="Rebuilds the fedora database" unless="upgradeEscidoc">
		<java className="org.fcrepo.server.utilities.rebuild.cli.CLILoader">
			<classpath>
				<pathelement path="${INSTALL_PATH}/fedora/server/bin" />
				<pathelement location="${INSTALL_PATH}/fedora/server/bin/fcrepo-server-3.4.2-cli-loader-main.jar" />
				<pathelement location="${INSTALL_PATH}/wildfly/deployments/bin/fcrepo-server-3.4.2-cli-loader-main.jar" />
			</classpath>
		
		</java>
	
	</target>
-->
  <target name="escidoc-sources" depends="init" description="Installs eSciDoc Source Code">
    <!-- unpack escidoc-sources ZIP file -->
    <echo level="info">Unpack eSciDoc Examples</echo>
    <antcall target="unpack">
      <param name="zipfile" value="${install.dir}/install.tmp/${escidoc.sources.zip}" />
      <!-- uncomment if escidoc-examples ZIP file contains a base directory -->
      <param name="target.dir" value="${install.dir}/core/src" />
      <!-- uncomment if escidoc-examples ZIP file contains no base directory -->
      <!-- param name="target.dir" value="${install.dir}/infrastructure/escidoc-core-bin-${EscidocVersion}" /-->
    </antcall>
    <!--antcall target="rename">
		  <param name="source" value="${install.dir}/infrastructure/escidoc-sources-${EscidocVersion}" />
		  <param name="target" value="${install.dir}/infrastructure/src" />
		</antcall-->
    <delete file="${install.dir}/install.tmp/${escidoc.sources.zip}" />
  </target>

  <target name="digilib" depends="init" description="Installs Digilib Image Viewing and Manipulation Service">
    <!-- deploy Digilib Web Archives in JBoss -->
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/${digilib.server.war}" />
      <param name="target" value="${install.dir}/wildfly/standalone/deployments/${digilib.server.war}" />
    </antcall>
    <antcall target="move-file-with-save">
      <param name="source" value="${install.dir}/install.tmp/${digilib.client.war}" />
      <param name="target" value="${install.dir}/wildfly/standalone/deployments/${digilib.client.war}" />
    </antcall>
  </target>

  <!-- Following target is commented out for debugging purposes only.    -->
  <!-- Remove comments before releasing the installer!                   -->
  <target name="cleanup" depends="init" description="Cleans up after installation">
    <!-- clean up after installation -->
    <echo level="info">Clean up after installation</echo>
    <!--fail message="for debug purposes - comment out this line in unpack-core.xml to get a successful build" /-->
    <delete dir="${install.dir}/core/bin" />
    <delete dir="${install.dir}/core/etc" />
    <delete dir="${install.dir}/core/sql" />
    <delete file="${install.dir}/install.tmp/${wildfly}.zip" />
    <!-- The database driver lib is still bound to the ant script and cannot be deleted -->
    <!-- delete dir="${install.dir}/core/lib" / -->
  </target>

  <target name="unpack" description="Unpack a ZIP file">
    <!-- unpack specified ZIP file -->
    <unzip src="${zipfile}" dest="${target.dir}" />
  </target>

  <target name="move-dir-without-save" description="move a directory">
    <if>
      <and>
        <available file="${sourceDir}" />
        <available file="${targetDir}" />
      </and>
      <then>
        <move file="${sourceDir}" todir="${targetDir}" />
      </then>
    </if>
  </target>

  <target name="move-with-save" description="move a set of files and create a backup of each file before overwriting">
    <for param="sourceFile">
      <path>
        <fileset dir="${sourceDir}" />
      </path>
      <sequential>
        <var name="relativePath" unset="true" />
        <pathconvert property="relativePath">
          <path location="@{sourceFile}" />
          <map from="${sourceDir}" to="" />
        </pathconvert>
        <antcall target="move-file-with-save">
          <param name="source" value="@{sourceFile}" />
          <param name="target" value="${targetDir}/${relativePath}" />
        </antcall>
      </sequential>
    </for>
  </target>

  <target name="move-file-with-save" description="move a single file and create a backup of the file before overwriting">
    <if>
      <and>
        <not>
          <filesmatch file1="${source}" file2="${target}" />
        </not>
        <available file="${target}" />
      </and>
      <then>
        <move file="${target}" tofile="${target}.bak" force="true" />
      </then>
    </if>
    <move file="${source}" tofile="${target}" />
  </target>

  <target name="rename" description="Renames a directory">
    <available file="${target}" property="dir.already.present" />
    <antcall target="rename-with-save">
      <param name="source" value="${source}" />
      <param name="target" value="${target}" />
    </antcall>
    <antcall target="rename-without-save">
      <param name="source" value="${source}" />
      <param name="target" value="${target}" />
    </antcall>
  </target>

  <target name="rename-with-save" if="dir.already.present" description="Renames an existing directory and then renames a directory to the preexisting name">
    <!-- rename a file or directory -->
    <property name="new.name.for.old.target" value="${target}-${timestamp}" />
    <move file="${target}" tofile="${new.name.for.old.target}" />
    <move file="${source}" tofile="${target}" />
  </target>

  <target name="rename-without-save" unless="dir.already.present" description="Renames a directory">
    <echo level="debug">move ${source} to ${target}</echo>
    <move file="${source}" tofile="${target}" />
  </target>

</project>
