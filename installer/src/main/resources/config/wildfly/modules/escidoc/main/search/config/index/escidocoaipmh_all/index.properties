#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development and Distribution License, Version 1.0
# only (the "License"). You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at license/ESCIDOC.LICENSE or http://www.escidoc.de/license. See the License
# for the specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and include the License file at
# license/ESCIDOC.LICENSE. If applicable, add the following below this CDDL HEADER, with the fields enclosed by
# brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2006-2011 Fachinformationszentrum Karlsruhe Gesellschaft fuer wissenschaftlich-technische Information mbH
# and Max-Planck-Gesellschaft zur Foerderung der Wissenschaft e.V. All rights reserved. Use is subject to license
# terms.
#

# Properties for the escidocoaipmh_all index

#name of the lucene index (must match the name of the directory this file is in)
fgsindex.indexName					= escidocoaipmh_all

#Name of the stylesheet used to transform the escidoc-object-xml into the index-information-document. 
#the stylesheet has to be located in the directory this file is in.
#NOTE: stylesheet-file has to end with .xslt, property is name of the file without .xslt !!!
#Alternatively an URL to the stylesheet can be used. 
#Then you dont need to put a stylesheet in this directory.
fgsindex.defaultUpdateIndexDocXslt		= escidocOaipmhXmlToLucene

# Absolute path to lucene index
fgsindex.indexDir				= ${jboss.home.dir}/standalone/data/index/lucene/escidocoaipmh_all

#The Analyzer to use for indexing 
#(normally please use de.escidoc.sb.common.lucene.analyzer.EscidocAnalyzer)
fgsindex.analyzer				= de.escidoc.sb.common.lucene.analyzer.EscidocAnalyzer

#Directory Implementation for lucene (used for merges + optimize)
#can be:
#
#org.apache.lucene.store.SimpleFSDirectory:
#is a straightforward implementation using java.io.RandomAccessFile. 
#However, it has poor concurrent performance (multiple threads will bottleneck) 
#as it synchronizes when multiple threads read from the same file.
#
#org.apache.lucene.store.NIOFSDirectory:
#uses java.nio's FileChannel's positional io when reading to avoid synchronization when reading from the same file. 
#Unfortunately, due to a Windows-only Sun JRE bug this is a poor choice for Windows, 
#but on all other platforms this is the preferred choice. 
#Applications using Thread.interrupt() or Future.cancel(boolean) should use SimpleFSDirectory instead. 
#See NIOFSDirectory java doc for details. 
#
#org.apache.lucene.store.MMapDirectory:
#uses memory-mapped IO when reading. This is a good choice if you have plenty of virtual memory relative to your index size, 
#eg if you are running on a 64 bit JRE, or you are running on a 32 bit JRE but your index sizes are 
#small enough to fit into the virtual memory space. Java has currently the limitation of not being able to unmap files from user code. 
#The files are unmapped, when GC releases the byte buffers. Due to this bug in Sun's JRE, MMapDirectory's IndexInput.close() 
#is unable to close the underlying OS file handle. Only when GC finally collects the underlying objects, 
#which could be quite some time later, will the file handle be closed. 
#This will consume additional transient disk usage: on Windows, attempts to delete or overwrite the files will result in 
#an exception; on other platforms, which typically have a "delete on last close" semantics, 
#while such operations will succeed, the bytes are still consuming space on disk. 
#For many applications this limitation is not a problem (e.g. if you have plenty of disk space, 
#and you don't rely on overwriting files on Windows) but it's still an important limitation to be aware of. 
#This class supplies a (possibly dangerous) workaround mentioned in the bug report, which may fail on non-Sun JVMs. 
#Applications using Thread.interrupt() or Future.cancel(boolean) should use SimpleFSDirectory instead. 
#See MMapDirectory java doc for details.
#By default Lucene detects the best implementation by itself.
fgsindex.lucene.directory.implementation = org.apache.lucene.store.SimpleFSDirectory

#Sets the maximum chunk size (default is Integer.MAX_VALUE for 64 bit JVMs and 256 MiBytes for 32 bit JVMs) 
#used for memory mapping. Especially on 32 bit platform, the address space can be very fragmented, 
#so large index files cannot be mapped. 
#Using a lower chunk size makes the directory implementation a little bit slower 
#(as the correct chunk must be resolved on each seek) 
#but the chance is higher that mmap does not fail (used by merges of segments).
#fgsindex.maxChunkSize = 200000000

#The MergeFactor controls how many documents are stored within each segment 
#before a new one is started and how many are started before they are collected into a larger one. 
#So a Factor of 10 means, 10 documents before aggregating 
#and 10 aggregated indexes of a certain size before aggregating again. 
#Consequently MergeFactor controls the number of open files. 
fgsindex.mergeFactor = 5

############DONT CHANGE BELOW THIS LINE###############################################
fgsindex.operationsImpl				= dk.defxws.fgslucene.OperationsImpl

fgsindex.uriResolver = de.escidoc.sb.gsearch.xslt.EscidocUriResolver
fgsindex.defaultUpdateIndexResultXslt	= ../copyXml
fgsindex.defaultGfindObjectsResultXslt	= ../copyXml
fgsindex.defaultBrowseIndexResultXslt	= ../copyXml
fgsindex.defaultGetIndexInfoResultXslt	= ../copyXml

fgsindex.defaultQueryFields		= dc.description dc.title

fgsindex.defaultWriteLockTimeout = 100000000
