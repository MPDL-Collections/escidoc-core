/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License, Version 1.0 only
 * (the "License").  You may not use this file except in compliance
 * with the License.
 *
 * You can obtain a copy of the license at license/ESCIDOC.LICENSE
 * or http://www.escidoc.de/license.
 * See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at license/ESCIDOC.LICENSE.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright 2006-2008 Fachinformationszentrum Karlsruhe Gesellschaft
 * fuer wissenschaftlich-technische Information mbH and Max-Planck-
 * Gesellschaft zur Foerderung der Wissenschaft e.V.  
 * All rights reserved.  Use is subject to license terms.
 */
package de.escidoc.core.test.om.context;

import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.w3c.dom.Document;

import de.escidoc.core.common.exceptions.remote.application.invalid.InvalidStatusException;
import de.escidoc.core.common.exceptions.remote.application.invalid.XmlCorruptedException;
import de.escidoc.core.common.exceptions.remote.application.missing.MissingMethodParameterException;
import de.escidoc.core.common.exceptions.remote.application.notfound.ContextNotFoundException;
import de.escidoc.core.common.exceptions.remote.application.violated.OptimisticLockingException;
import de.escidoc.core.test.EscidocRestSoapTestsBase;

/**
 * Test the mock implementation of the item resource.
 * 
 * @author MSC
 * 
 */
@RunWith(value = Parameterized.class)
public class OpenTest extends ContextTestBase {

    private String path = TEMPLATE_CONTEXT_PATH;

    /**
     * @param transport
     *            The transport identifier.
     */
    public OpenTest(final int transport) {
        super(transport);
    }

    /**
     * Set up servlet test.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Override
    @Before
    public void setUp() throws Exception {

        super.setUp();
        this.path += "/" + getTransport(false);
    }

    /**
     * Successfully test opening a context.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc1() throws Exception {

        Document context =
            EscidocRestSoapTestsBase.getTemplateAsDocument(this.path,
                "context_create.xml");
        substitute(context, "/context/properties/name",
            getUniqueName("PubMan Context "));
        String template = toString(context, false);
        String created = create(template);
        assertXmlValidContext(created);
        Document createdDoc = EscidocRestSoapTestsBase.getDocument(created);
        String id = getObjidValue(createdDoc);
        String lastModified = getLastModificationDateValue(createdDoc);
        open(id, getTaskParam(lastModified));
        String opened = retrieve(id);
        Document openedDoc = EscidocRestSoapTestsBase.getDocument(opened);

        assertXmlValidContext(created);
        assertXmlEquals("Context opening error: Wrong status!", opened,
            "/context/properties/public-status", CONTEXT_STATUS_OPENED);
        assertNotEquals("Comment not changed", selectSingleNode(createdDoc,
            "/context/properties/public-status-comment/text()").getNodeValue(),
            selectSingleNode(openedDoc,
                "/context/properties/public-status-comment/text()")
                .getNodeValue());
        assertTimestampIsEqualOrAfter(
            "Context opening error: last-modification-date has wrong value!",
            getLastModificationDateValue(EscidocRestSoapTestsBase
                .getDocument(opened)), lastModified);
        assertCreatedContext(opened, created, startTimestamp);
        assertCreatedBy("created-by not as expected!", createdDoc, openedDoc);
        assertModifiedBy("modified-by not as expected!", createdDoc, openedDoc);
    }

    /**
     * Test opening a context with non existing context id.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc2() throws Exception {
        Class<?> ec = ContextNotFoundException.class;
        try {
            open("escidoc:UnknownContext", getTaskParam(null));
            fail(ec + " expected but no error occurred!");
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Test opening a context with an existing context id but a wrong
     * last-modification-date timestamp.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc3a() throws Exception {
        Class<?> ec = OptimisticLockingException.class;
        try {
            Document context =
                EscidocRestSoapTestsBase.getTemplateAsDocument(this.path,
                    "context_create.xml");
            substitute(context, "/context/properties/name",
                getUniqueName("PubMan Context "));
            String template = toString(context, false);
            String created = create(template);
            assertXmlValidContext(created);
            Document createdDoc = EscidocRestSoapTestsBase.getDocument(created);
            String id = getObjidValue(createdDoc);
            // String lastModified = getLastModificationDateValue(createdDoc);
            open(id, getTaskParam(null));
            fail(ec + " expected but no error occurred!");
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Test opening a context with an existing context id but an incorrect
     * last-modification-date timestamp.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc3b() throws Exception {
        Class<?> ec = XmlCorruptedException.class;
        try {
            Document context =
                EscidocRestSoapTestsBase.getTemplateAsDocument(this.path,
                    "context_create.xml");
            substitute(context, "/context/properties/name",
                getUniqueName("PubMan Context "));
            String template = toString(context, false);
            String created = create(template);
            assertXmlValidContext(created);
            Document createdDoc = EscidocRestSoapTestsBase.getDocument(created);
            String id = getObjidValue(createdDoc);
            // String lastModified = getLastModificationDateValue(createdDoc);
            open(id, getTaskParam("incorrect timestamp"));
            fail(ec + " expected but no error occurred!");
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Test opening a context with an existing context id and an missing
     * last-modification-date timestamp attribute.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc3c() throws Exception {
        Class<?> ec = XmlCorruptedException.class;
        try {
            Document context =
                EscidocRestSoapTestsBase.getTemplateAsDocument(this.path,
                    "context_create.xml");
            substitute(context, "/context/properties/name",
                getUniqueName("PubMan Context "));
            String template = toString(context, false);
            String created = create(template);
            assertXmlValidContext(created);
            Document createdDoc = EscidocRestSoapTestsBase.getDocument(created);
            String id = getObjidValue(createdDoc);
            // String lastModified = getLastModificationDateValue(createdDoc);
            String param =
                toString(deleteAttribute(EscidocRestSoapTestsBase
                    .getDocument(getTaskParam("incorrect timestamp")),
                    "/param", "last-modification-date"), false);
            open(id, param);
            fail(ec + " expected but no error occurred!");
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Test opening a context with missing context id but a correct
     * last-modification-date timestamp.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc4a() throws Exception {
        Class<?> ec = MissingMethodParameterException.class;
        try {
            open(null, getTaskParam(null));
            EscidocRestSoapTestsBase.failMissingException(ec);
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Test opening a context with existing context id but missing
     * last-modification-date timestamp.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc4b() throws Exception {
        Class<?> ec = MissingMethodParameterException.class;
        try {
            Document context =
                EscidocRestSoapTestsBase.getTemplateAsDocument(this.path,
                    "context_create.xml");
            substitute(context, "/context/properties/name",
                getUniqueName("PubMan Context "));
            String template = toString(context, false);
            String created = create(template);
            assertXmlValidContext(created);
            Document createdDoc = EscidocRestSoapTestsBase.getDocument(created);
            String id = getObjidValue(createdDoc);
            // String lastModified = getLastModificationDateValue(createdDoc);
            open(id, null);
            fail(ec + " expected but no error occurred!");
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Test opening a context with existing context id and missing
     * last-modification-date timestamp.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc4c() throws Exception {
        Class<?> ec = MissingMethodParameterException.class;
        try {
            open(null, null);
            EscidocRestSoapTestsBase.failMissingException(ec);
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Try to open an already opened context.
     * 
     * @throws Exception
     *             If anything fails.
     */
    @Test
    public void testOmOc5() throws Exception {
        Class<?> ec = InvalidStatusException.class;
        Document context =
            EscidocRestSoapTestsBase.getTemplateAsDocument(this.path,
                "context_create.xml");
        substitute(context, "/context/properties/name",
            getUniqueName("PubMan Context "));
        String template = toString(context, false);
        String created = create(template);
        assertXmlValidContext(created);
        Document createdDoc = EscidocRestSoapTestsBase.getDocument(created);
        String id = getObjidValue(createdDoc);
        String lastModified = getLastModificationDateValue(createdDoc);
        open(id, getTaskParam(lastModified));
        try {

            open(
                id,
                getTaskParam(getLastModificationDateValue(EscidocRestSoapTestsBase
                    .getDocument(retrieve(id)))));
            fail(ec + " expected but no error occurred!");
        }
        catch (Exception e) {
            EscidocRestSoapTestsBase.assertExceptionType(ec.getName()
                + " expected.", ec, e);
        }
    }

    /**
     * Test the last modification date timestamp of the open/close method.
     * 
     * @throws Exception
     *             Thrown if anything failed.
     */
    @Test
    public void testReturnValue01() throws Exception {

        Document context =
            EscidocRestSoapTestsBase.getTemplateAsDocument(this.path,
                "context_create.xml");
        substitute(context, "/context/properties/name",
            getUniqueName("PubMan Context "));
        String template = toString(context, false);
        String created = create(template);
        assertXmlValidContext(created);

        Document createdDoc = EscidocRestSoapTestsBase.getDocument(created);
        String contextId = getObjidValue(createdDoc);

        String lmd = getLastModificationDateValue(createdDoc);
        String resultXml = open(contextId, getTaskParam(lmd));
        assertXmlValidResult(resultXml);
        String lmdOpen = getLastModificationDateValue(getDocument(resultXml));

        resultXml = close(contextId, getTaskParam(lmdOpen));
        assertXmlValidResult(resultXml);
        String lmdClose = getLastModificationDateValue(getDocument(resultXml));

        assertTimestampIsEqualOrAfter("Wrong timestamp", lmdClose, lmdOpen);
    }

}
